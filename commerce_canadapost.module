<?php

/**
 * @file
 * Provides functionality for the Commerce Canada Post module.
 */

use Drupal\commerce_shipping\Entity\ShipmentInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Constants.
 */

/**
 * The name of the logger channel to use throughout this module.
 */
const COMMERCE_CANADAPOST_LOGGER_CHANNEL = 'commerce_canadapost';

/**
 * Hooks.
 */

/**
 * Implements hook_help().
 */
function commerce_canadapost_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_canadapost module.
    case 'help.page.commerce_canadapost':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides Canada Post shipping calculations for Drupal Commerce by extending the Drupal Commerce Shipping API. This module should be used by those that want to provide dynamic Canada Post shipping rates and tracking for their Canada based Drupal Commerce sites.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dt>' . t('1. Go to /admin/commerce/config/shipping-methods/add') . '</dt>';
      $output .= '<dt>' . t('2. Select \'Canada Post\' as the Plugin') . '</dt>';
      $output .= '<dt>' . t('3. Enter the Canada Post API details') . '</dt>';
      $output .= '<dt>' . t('4. Select a default package type') . '</dt>';
      $output .= '<dt>' . t('5. Select all the shipping services that should be disabled') . '</dt>';
      $output .= '<dt>' . t('6. Click on the Canada Post API settings link under \'API Authentication\' and add your customer number, username, password and other optional config and save configuration') . '</dt>';
      $output .= '<dt>' . t('7. Add a product to cart and checkout') . '</dt>';
      $output .= '<dt>' . t('8. Enter your shipping address and click on \'Calculate Shipping\'') . '</dt>';
      $output .= '<dt>' . t('9. The estimated rates retrieved from Canada Post will now show up for the order') . '</dt>';
      $output .= '<h3>' . t('Updating Tracking Information') . '</h3>';
      $output .= '<p>' . t('Tracking summary for each shipment on an order can be seen in the order view page.') . '</p>';
      $output .= '<p>' . t('To add the tracking code received from Canada Post to a shipment:') . '</p>';
      $output .= '<dt>' . t('1. Go to /admin/commerce/orders/{COMMERCE_ORDER_ID}/shipments') . '</dt>';
      $output .= '<dt>' . t('2. Click on the \'Edit\' button under the appropriate shipment') . '</dt>';
      $output .= '<dt>' . t('3. Enter the tracking code received from Canada Post in the \'Tracking code\' field and save') . '</dt>';
      $output .= '<p>' . t('Once a shipment is updated with a tracking code, tracking summary is automatically updated via cron. It can also be done via the drush command: `drush cc-uptracking`.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_canadapost_form_commerce_shipment_canadapost_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  array_unshift($form['actions']['submit']['#submit'], 'commerce_canadapost_commerce_shipment_form_submit');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_canadapost_form_commerce_checkout_flow_multistep_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!isset($form['shipping_information']['shipments'])) {
    return;
  }

  foreach ($form['shipping_information']['shipments'] as &$shipment) {
    $fields = [
      'field_actual_delivery',
      'field_attempted_delivery',
      'field_expected_delivery',
      'field_mailed_on',
      'field_current_location',
    ];
    foreach ($fields as $field) {
      if (isset($shipment[$field])) {
        $shipment[$field]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Functions.
 */

/**
 * Provides a submit handler for the 'Save commerce shipment' button.
 */
function commerce_canadapost_commerce_shipment_form_submit($form, FormStateInterface $form_state) {
  if (empty($form_state->getValue('tracking_code')[0]['value'])) {
    return;
  }

  /** @var \Drupal\commerce_shipping\Entity\Shipment $shipment */
  $shipment = $form_state->getFormObject()->getEntity();
  $current_tracking_pin = $shipment->get('tracking_code')->value;
  $submitted_tracking_pin = $form_state->getValue('tracking_code')[0]['value'];
  if ($submitted_tracking_pin === $current_tracking_pin) {
    return;
  }

  /** @var \Drupal\commerce_canadapost\Api\TrackingService $tracking_service */
  $tracking_service = \Drupal::service('commerce_canadapost.tracking_api');
  $tracking_summary = $tracking_service->fetchTrackingSummary($submitted_tracking_pin);

  $values = [];
  if (!empty($tracking_summary['actual-delivery-date'])) {
    $values['field_actual_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['actual-delivery-date']);
  }

  if (!empty($tracking_summary['attempted-date'])) {
    $values['field_attempted_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['attempted-date']);
  }

  if (!empty($tracking_summary['expected-delivery-date'])) {
    $values['field_expected_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['expected-delivery-date']);
  }

  if (!empty($tracking_summary['mailed-on-date'])) {
    $values['field_mailed_on'][0]['value'] = new DrupalDateTime($tracking_summary['mailed-on-date']);
  }

  // TODO: Confirm that we are in fact, getting an actual address back.
  if (!empty($tracking_summary['event-location'])) {
    /*$values['field_current_location']['address'] = [
      'country_code' => 'CA',
      'address_line1' => '123 Test Street',
      'locality' => 'Kelowna',
      'administrative_area' => 'BC',
      'postal_code' => 'V1X5V1',
    ];*/
  }

  $form_state->setValues($values);
  $shipment->set('tracking_code', $submitted_tracking_pin);
}

/**
 * Implements hook_cron().
 */
function commerce_canadapost_cron() {
  // Update tracking data for all incomplete canadapost shipments with a
  // tracking code.
  _commerce_canadapost_update_tracking_data();
}

/**
 * Update tracking data for all incomplete canadapost shipments.
 *
 * @param array $order_ids
 *   An array of order IDs to update the tracking data for. Leave empty to
 *   update all orders with incomplete shipments.
 *
 * @return array
 *   An array of order IDs for which the shipments were updated for.
 */
function _commerce_canadapost_update_tracking_data(array $order_ids = NULL) {
  $updated_order_ids = [];

  /** @var \Drupal\commerce_canadapost\Api\TrackingService $tracking_service */
  $tracking_service = \Drupal::service('commerce_canadapost.tracking_api');

  // Fetch shipments for tracking.
  $shipments = _commerce_canadapost_fetch_shipments_for_tracking($order_ids);

  foreach ($shipments as $shipment) {
    /** @var \Drupal\commerce_shipping\Entity\ShipmentInterface $shipment */
    // Fetch tracking summary.
    $tracking_summary = $tracking_service->fetchTrackingSummary($shipment->getTrackingCode());

    // Update the shipment fields with the tracking data.
    $updated_order_ids[] = commerce_canadapost_update_tracking_fields($shipment, $tracking_summary);
  }

  return $updated_order_ids;
}

/**
 * Fetch all incomplete canadapost shipments that have a tracking pin.
 *
 * @param array $order_ids
 *   Only fetch shipments of specific order IDs.
 *
 * @return array
 *   An array of shipment entities.
 */
function _commerce_canadapost_fetch_shipments_for_tracking(array $order_ids = NULL) {
  $entity_type_manager = \Drupal::entityTypeManager();

  // Query the db for the incomplete shipments.
  $shipment_query = $entity_type_manager
    ->getStorage('commerce_shipment')
    ->getQuery();
  $shipment_query
    ->condition('type', 'canadapost')
    ->condition('state', 'completed', '!=')
    ->condition('tracking_code', NULL, 'IS NOT NULL');
  // If specific order IDs have been passed.
  if (!empty($order_ids)) {
    $shipment_query->condition('order_id', $order_ids, 'IN');
  }
  // Fetch the results.
  $shipment_ids = $shipment_query->execute();

  // Return the loaded shipment entities.
  return $entity_type_manager
    ->getStorage('commerce_shipment')
    ->loadMultiple($shipment_ids);
}

/**
 * Update the shipment fields with the tracking summary.
 *
 * @param \Drupal\commerce_shipping\Entity\ShipmentInterface $shipment
 *   The commerce shipment.
 * @param array $tracking_summary
 *   The tracking summary from Canada Post.
 *
 * @return int
 *   The order ID for which the shipment was updated for.
 */
function commerce_canadapost_update_tracking_fields(ShipmentInterface $shipment, array $tracking_summary) {
  // Update the fields.
  if (!empty($tracking_summary['actual-delivery-date'])) {
    $shipment->set('field_actual_delivery', new DrupalDateTime($tracking_summary['actual-delivery-date']));
  }

  if (!empty($tracking_summary['attempted-date'])) {
    $shipment->set('field_attempted_delivery', new DrupalDateTime($tracking_summary['attempted-date']));
  }

  if (!empty($tracking_summary['expected-delivery-date'])) {
    $shipment->set('field_expected_delivery', new DrupalDateTime($tracking_summary['expected-delivery-date']));
  }

  if (!empty($tracking_summary['mailed-on-date'])) {
    $shipment->set('field_mailed_on', new DrupalDateTime($tracking_summary['mailed-on-date']));
  }

  // TODO: Confirm that we are in fact, getting an actual address back.
  if (!empty($tracking_summary['event-location'])) {
    $shipment->set('field_current_location', [
      'address' => [],
    ]);
  }

  // Now, save the shipment.
  $shipment->save();

  // Return the order ID for this updated shipment.
  return $shipment->getOrderId();
}
