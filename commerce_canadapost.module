<?php

/**
 * @file
 * Provides functionality for the Commerce Canada Post module.
 */

use Drupal\commerce_store\Entity\StoreInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Constants.
 */

/**
 * The name of the logger channel to use throughout this module.
 */
const COMMERCE_CANADAPOST_LOGGER_CHANNEL = 'commerce_canadapost';

/**
 * Hooks.
 */

/**
 * Implements hook_help().
 */
function commerce_canadapost_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_canadapost module.
    case 'help.page.commerce_canadapost':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides Canada Post shipping calculations for Drupal Commerce by extending the Drupal Commerce Shipping API. This module should be used by those that want to provide dynamic Canada Post shipping rates and tracking for their Canada based Drupal Commerce sites.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dt>' . t('1. Go to /admin/commerce/config/shipping-methods/add') . '</dt>';
      $output .= '<dt>' . t('2. Select \'Canada Post\' as the Plugin') . '</dt>';
      $output .= '<dt>' . t('3. Enter the Canada Post API details') . '</dt>';
      $output .= '<dt>' . t('4. Select a default package type') . '</dt>';
      $output .= '<dt>' . t('5. Select all the shipping services that should be disabled') . '</dt>';
      $output .= '<dt>' . t('6. Click on the Canada Post API settings link under \'API Authentication\' and add your customer number, username, password and other optional config and save configuration') . '</dt>';
      $output .= '<dt>' . t('7. Add a product to cart and checkout') . '</dt>';
      $output .= '<dt>' . t('8. Enter your shipping address and click on \'Calculate Shipping\'') . '</dt>';
      $output .= '<dt>' . t('9. The estimated rates retrieved from Canada Post will now show up for the order') . '</dt>';
      $output .= '<h3>' . t('Updating Tracking Information') . '</h3>';
      $output .= '<p>' . t('Tracking summary for each shipment on an order can be seen in the order view page.') . '</p>';
      $output .= '<p>' . t('To add the tracking code received from Canada Post to a shipment:') . '</p>';
      $output .= '<dt>' . t('1. Go to /admin/commerce/orders/{COMMERCE_ORDER_ID}/shipments') . '</dt>';
      $output .= '<dt>' . t('2. Click on the \'Edit\' button under the appropriate shipment') . '</dt>';
      $output .= '<dt>' . t('3. Enter the tracking code received from Canada Post in the \'Tracking code\' field and save') . '</dt>';
      $output .= '<p>' . t('Once a shipment is updated with a tracking code, tracking summary is automatically updated via cron. It can also be done via the drush command: `drush cc-uptracking`.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_canadapost_form_commerce_shipment_canadapost_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  array_unshift($form['actions']['submit']['#submit'], 'commerce_canadapost_commerce_shipment_form_submit');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_canadapost_form_commerce_checkout_flow_multistep_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!isset($form['shipping_information']['shipments'])) {
    return;
  }

  foreach ($form['shipping_information']['shipments'] as &$shipment) {
    $fields = [
      'field_actual_delivery',
      'field_attempted_delivery',
      'field_expected_delivery',
      'field_mailed_on',
    ];
    foreach ($fields as $field) {
      if (isset($shipment[$field])) {
        $shipment[$field]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_canadapost_form_commerce_store_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\commerce_store\Entity\StoreInterface $store */
  $store = $form_state->getFormObject()->getEntity();
  //ksm($store->get('blah'));

  $form['#entity_builders'][] = 'commerce_canadapost_form_commerce_store_form_builder';
}

/**
 * Functions.
 */

/**
 * Provides a submit handler for the 'Save commerce shipment' button.
 */
function commerce_canadapost_commerce_shipment_form_submit($form, FormStateInterface $form_state) {
  if (empty($form_state->getValue('tracking_code')[0]['value'])) {
    return;
  }

  /** @var \Drupal\commerce_shipping\Entity\Shipment $shipment */
  $shipment = $form_state->getFormObject()->getEntity();
  $current_tracking_pin = $shipment->get('tracking_code')->value;
  $submitted_tracking_pin = $form_state->getValue('tracking_code')[0]['value'];
  if ($submitted_tracking_pin === $current_tracking_pin) {
    return;
  }

  /** @var \Drupal\commerce_canadapost\Api\TrackingService $tracking_service */
  $tracking_service = \Drupal::service('commerce_canadapost.tracking_api');
  $tracking_summary = $tracking_service->fetchTrackingSummary($submitted_tracking_pin);

  $values = [];
  if (!empty($tracking_summary['actual-delivery-date'])) {
    $values['field_actual_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['actual-delivery-date']);
  }

  if (!empty($tracking_summary['attempted-date'])) {
    $values['field_attempted_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['attempted-date']);
  }

  if (!empty($tracking_summary['expected-delivery-date'])) {
    $values['field_expected_delivery'][0]['value'] = new DrupalDateTime($tracking_summary['expected-delivery-date']);
  }

  if (!empty($tracking_summary['mailed-on-date'])) {
    $values['field_mailed_on'][0]['value'] = new DrupalDateTime($tracking_summary['mailed-on-date']);
  }

  $form_state->setValues($values);
  $shipment->set('tracking_code', $submitted_tracking_pin);
}

/**
 * Entity builder for the commerce_store entity.
 */
function commerce_canadapost_form_commerce_store_form_builder(
  $entity_type,
  StoreInterface $store,
  &$form,
  FormStateInterface $form_state
) {

}

/**
 * Build the form fields for the Canada Post API settings.
 *
 * @see \Drupal\commerce_canadapost\Form::buildForm()
 * @see \commerce_canadapost_form_alter()
 */
function _commerce_canadapost_build_api_form(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('commerce_canadapost.settings');

  $form['api'] = [
    '#type' => 'details',
    '#title' => t('API authentication'),
    '#open' => TRUE,
  ];

  $form['api']['customer_number'] = [
    '#type' => 'textfield',
    '#title' => t('Customer number'),
    '#default_value' => $config->get('api.customer_number'),
    '#required' => TRUE,
  ];
  $form['api']['username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $config->get('api.username'),
    '#required' => TRUE,
  ];
  $form['api']['password'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $config->get('api.password'),
    '#required' => TRUE,
  ];
  $form['api']['contract_id'] = [
    '#type' => 'textfield',
    '#title' => t('Contract ID'),
    '#default_value' => $config->get('api.contract_id'),
  ];
  $form['api']['mode'] = [
    '#type' => 'select',
    '#title' => t('Mode'),
    '#default_value' => $config->get('api.mode'),
    '#options' => [
      'test' => t('Test'),
      'live' => t('Live'),
    ],
    '#required' => TRUE,
  ];
  $form['api']['log'] = [
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => [
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ],
    '#default_value' => $config->get('api.log'),
  ];
}
